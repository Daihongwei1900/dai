<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:p="http://www.springframework.org/schema/p"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd">
    <!-- UserService的创建权交给了Spring -->
    <!--
     1. <bean id="userService" class="com.imooc.first.demo1.UserServiceImpl">
        <property name="name" value="李四"/>
    </bean>

      Bean的实例化的三种方式
        第一种：无参构造器的方式
         <bean id="bean1" class="com.imooc.firstst.demo2.Bean1"/>
        第二种：静态工厂的方式
         <bean id="bean2" class="com.imooc.firstst.demo2.Bean2Factory" factory-method="createBean2"/>
        第三种：实例工厂的方式
         <bean id="bean3Factory" class="com.imooc.firstst.demo2.Bean3Factory"/>
         <bean id="bean3" factory-bean="bean3Factory" factory-method="createBean3"/>

        Bean的作用范围  scope={prototype 多例的 singleton 默认单例 request  session  global_session}
         <bean id="person" class="com.imooc.firstst.demo3.Person" scope="prototype"/>
        指定初始和销毁方法
         <bean id="man" class="com.imooc.firstst.demo3.Man" init-method="setup" destroy-method="teardown">
         <property name="name" value="张三"/>
        </bean>
        配置bean生命周期的预处理
        <bean class="com.imooc.firstst.demo3.MyBeanPostProcessor"/>

        属性注入
1.需要构造器        <bean id="user" class="com.imooc.first.demo4.User">
                        <constructor-arg name="name" value="张三" />
                         <constructor-arg name="age" value="23"/>        </bean>
2.需要set方法  对象类型用ref
                    <bean id="person" class="com.imooc.first.demo4.Person">
                    <property name="name" value="李四"/>
                    <property name="age" value="32"/>
                    <property name="cat" ref="cat"/>    </bean>
                    <bean id="cat" class="com.imooc.first.demo4.Cat">
                     <property name="name" value="ketty"/> </bean>
            Bean的p名称空间的属性注入  简写了property，记得引入约束
     <bean id="person" class="com.imooc.firstst.demo4.Person" p:name="大黄" p:age="34" p:cat-ref="cat"/>
            Bean的SpEL的属性注入，配置文件的形式，当然先要指定文件位置，格式如下
            <bean id="category" class="com.imooc.firstst.demo4.Category">
        <property name="name" value="#{'服装'}"/>   </bean>
        格式：
            <bean  class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
    <property name="locations">
        <list>
            <value>classpath:config/db.properties</value>
            <value>classpath:config/user.properties</value>
        </list>
    </property>     </bean>

1.集合属性注入
        <bean id="collectionBean" class="com.imooc.first.demo5.CollectionBean">
        数组类型
    <property name="arrs">
        <list>
            <value>aaa</value>
            <value>bbb</value>
            <value>ccc</value>
        </list>
    </property>
      List集合的属性注入
    <property name="list">
        <list>
            <value>111</value>
            <value>222</value>
            <value>333</value>
        </list>
    </property>
  Set集合的属性注入
    <property name="set">
        <set>
            <value>ddd</value>
            <value>eee</value>
            <value>fff</value>
        </set>
    </property>
       Map集合的属性注入
    <property name="map">
        <map>
            <entry key="aaa" value="111"/>
            <entry key="bbb" value="222"/>
            <entry key="ccc" value="333"/>
        </map>
    </property>
        Properties的属性注入
    <property name="properties">
        <props>
            <prop key="username">root</prop>
            <prop key="password">1234</prop>
        </props>
    </property>
</bean>

采用c3p0的方式配置数据源
<bean id="dataSource" class="com.mchange.v2.c3p0.ComboPooledDataSource">
       连接数据库的必备信息
    <property name="driverClass" value="com.mysql.jdbc.Driver"></property>
    <property name="jdbcUrl" value="jdbc:mysql://localhost:3306/eesy"></property>
    <property name="user" value="root"></property>
    <property name="password" value="1234"></property>
</bean>

      -->
   </beans>